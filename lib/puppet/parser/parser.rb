#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 806)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'9,13,167,168,103,155,372,103,249,105,173,344,90,250,373,142,146,333',
'275,314,-183,-177,106,154,137,139,143,145,40,94,48,1,315,10,12,174,21',
'29,35,332,44,49,2,9,13,15,102,138,141,34,272,148,149,132,133,135,136',
'331,140,144,33,9,13,306,-184,134,8,98,275,300,99,40,352,48,1,369,10',
'12,368,21,29,35,339,44,49,2,9,13,15,33,297,298,34,399,64,117,297,298',
'29,222,9,13,49,33,9,13,15,161,72,8,34,53,-112,-96,40,54,48,1,345,10',
'12,33,21,29,35,154,44,49,2,9,13,15,275,362,-178,34,330,64,160,94,179',
'29,75,9,13,49,33,294,-179,15,342,178,8,34,53,293,183,40,54,48,1,-129',
'10,12,33,21,29,35,179,44,49,2,9,13,15,336,72,98,34,178,99,160,132,133',
'183,140,144,140,144,33,9,13,134,53,134,8,155,54,-196,33,205,206,208',
'189,191,64,195,197,200,239,243,-177,207,247,154,9,13,15,-176,199,202',
'244,397,64,249,179,337,29,222,250,303,49,33,9,13,15,178,190,194,34,327',
'183,326,40,283,48,1,282,10,12,33,21,29,35,119,44,49,2,9,13,15,179,140',
'144,34,318,64,-123,334,134,29,222,178,94,49,33,53,183,15,340,54,8,34',
'275,300,154,40,15,48,1,310,10,12,33,21,29,35,309,44,49,2,9,13,15,307',
'305,323,34,384,369,86,98,368,-130,99,303,142,146,33,84,85,307,292,356',
'8,137,139,143,145,40,287,48,1,33,10,12,284,21,29,35,359,44,49,2,9,13',
'15,33,138,141,34,349,148,149,132,133,135,136,33,140,144,33,9,13,248',
'365,134,8,-130,-130,-130,-130,40,-122,48,1,232,10,12,366,21,29,35,225',
'44,49,2,9,13,15,188,105,374,34,172,64,132,133,123,29,222,140,144,49',
'33,9,13,15,134,316,8,34,377,275,276,40,378,48,1,117,10,12,33,21,29,35',
'-182,44,49,2,9,13,15,-180,382,-178,34,395,64,53,-181,-179,29,129,301',
'44,49,33,275,300,15,278,385,8,34,275,276,-176,40,-183,48,1,386,10,12',
'33,21,29,35,86,44,49,2,9,13,15,123,296,-229,34,297,298,121,9,13,388',
'119,72,117,78,33,-40,-40,-40,-40,391,8,59,60,61,57,40,-178,48,1,65,10',
'12,393,21,29,35,303,44,49,2,64,-179,15,109,29,75,34,107,49,92,56,400',
'15,68,9,13,34,33,72,83,78,401,,8,9,13,,33,72,,78,,,,9,13,65,,72,,78',
'-38,-38,-38,-38,,65,64,,,,29,75,,,49,65,64,,15,68,29,75,34,,49,83,64',
',15,68,29,75,34,33,49,83,,,15,68,9,13,34,33,72,83,78,,,,9,13,,33,113',
',-196,,,,9,13,65,,72,,78,-44,-44,-44,-44,,112,64,,,,29,75,,,49,65,64',
',15,68,29,75,34,,49,83,64,,15,,29,75,34,33,49,,,,15,68,9,13,34,33,72',
'83,78,,,,9,13,,33,72,,78,,,,9,13,65,,72,,78,59,60,61,57,,65,64,,,,29',
'75,,,49,65,64,,15,68,29,75,34,,49,83,64,,15,68,29,75,34,33,49,83,,,15',
'68,9,13,34,33,72,83,78,,,,9,13,,33,72,,78,,,,9,13,65,,72,,,,148,149',
'132,133,65,64,,140,144,29,75,,,49,134,64,,15,68,29,75,34,,49,83,64,',
'15,68,29,75,34,33,49,83,,,15,,9,13,34,33,72,,78,,,,9,13,,33,72,,78,',
',,9,13,65,,72,,78,,,,,,65,64,,,,29,75,,,49,65,64,,15,68,29,75,34,,49',
'83,64,,15,68,29,75,34,33,49,83,9,13,15,68,72,,34,33,,83,9,13,,,72,152',
'78,33,,,9,13,,,72,,78,,,,9,13,65,64,72,,78,29,222,,,49,65,64,,15,,29',
'75,34,,49,65,64,,15,68,29,75,34,33,49,83,64,,15,68,29,75,34,33,49,83',
',,15,68,9,13,34,33,72,83,78,,,,9,13,,33,72,,78,,,,9,13,65,,72,,78,,',
',,,65,64,,,,29,75,,,49,65,64,,15,68,29,75,34,,49,83,64,,15,68,29,75',
'34,33,49,83,,,15,68,9,13,34,33,72,83,78,,,,9,13,,33,72,,78,,,,9,13,65',
',72,,78,,,,,,65,64,,,,29,75,,,49,65,64,,15,68,29,75,34,,49,83,64,,15',
'68,29,75,34,33,49,83,,,15,68,9,13,34,33,72,83,78,,,,9,13,,33,72,,78',
',,,9,13,65,,72,,78,,,,,,65,64,,,,29,75,,,49,65,64,,15,68,29,75,34,,49',
'83,64,,15,68,29,75,34,33,49,83,,,15,68,9,13,34,33,72,83,78,,,,9,13,',
'33,72,,78,148,149,132,133,,65,,140,144,,,,,,134,65,64,9,13,,29,75,,',
'49,,64,,15,68,29,75,34,,49,83,,,15,68,,,34,33,,83,,,,,64,53,,33,29,129',
',44,49,9,13,,15,72,,78,34,,,9,13,,,72,,78,,33,,,,65,,,,,,,,,,65,64,',
',,29,75,,,49,,64,,15,68,29,75,34,,49,83,285,,15,68,,,34,33,,83,142,146',
',,,,,33,,137,139,143,145,,,,,,9,13,9,13,,,72,371,78,,,,,,138,141,,,148',
'149,132,133,135,136,65,140,144,,,,9,13,134,64,72,64,78,29,222,29,75',
'49,,49,,15,,15,68,34,,34,65,,83,9,13,,,72,33,78,33,64,,,,29,75,,,49',
',,,15,68,65,,34,9,13,83,,72,,78,,64,,33,,29,75,,,49,9,13,,15,68,65,223',
'34,,,83,,,,,,64,,33,,29,75,,,49,,,,15,68,9,13,34,64,72,83,78,29,222',
',,49,,33,,15,,,,34,9,13,65,279,72,,78,,,,33,,,64,,,,29,75,,,49,65,226',
',15,68,,,34,,,83,64,,,,29,75,,33,49,,,,15,68,,,34,9,13,83,,72,152,78',
',,,33,,,,,,,9,13,,,72,65,78,,,,,,,,,,64,,,,29,75,65,,49,,,,15,68,,,34',
'64,,83,,29,75,,,49,,33,,15,68,9,13,34,,72,83,78,,,,9,13,,33,72,,78,',
',,9,13,65,,72,,78,,,,,,65,64,,,,29,75,,,49,65,64,,15,68,29,75,34,,49',
'83,64,,15,68,29,75,34,33,49,83,,,15,68,9,13,34,33,72,83,78,,,,9,13,',
'33,72,,78,,,,,,65,,,,,,,,,,65,64,,,,29,75,,,49,,64,,15,68,29,75,34,',
'49,83,,230,15,68,,,34,33,,83,142,146,,,,,147,33,,137,139,143,145,,,142',
'146,,,,,,,,137,139,143,145,,,,,138,141,,,148,149,132,133,135,136,,140',
'144,,,138,141,,134,148,149,132,133,135,136,229,140,144,,,,,,134,142',
'146,,,,,,,,137,139,143,145,,,142,146,,,,,,,,137,139,143,145,,,,,138',
'141,,,148,149,132,133,135,136,,140,144,,,138,141,,134,148,149,132,133',
'135,136,,140,144,142,146,,,,134,,,,137,139,143,145,,,142,146,,,,,,,',
'137,139,143,145,,,,,138,141,,,148,149,132,133,135,136,,140,144,,,138',
'141,,134,148,149,132,133,135,136,,140,144,142,146,,,,134,,,,137,139',
'143,145,,,142,146,,,,,,,,137,139,143,145,,,,,138,141,,,148,149,132,133',
'135,136,,140,144,,,138,141,,134,148,149,132,133,135,136,,140,144,142',
'146,,,,134,,,,137,139,143,145,,,142,146,,,,,,,,137,139,143,145,,,,,',
'141,,,148,149,132,133,135,136,,140,144,,,,,,134,148,149,132,133,135',
'136,,140,144,142,146,,,,134,,,,137,139,143,145,,,142,146,,,,,,,,137',
'139,143,145,,,,,,,,,148,149,132,133,135,136,,140,144,,,138,141,,134',
'148,149,132,133,135,136,,140,144,142,146,,,,134,,,,137,139,143,145,',
',142,146,,,,,,,,137,139,143,145,,,,,138,141,,,148,149,132,133,135,136',
',140,144,,,138,141,,134,148,149,132,133,135,136,,140,144,142,146,,,',
'134,,,,137,139,143,145,,,142,146,,,,,,,,137,139,143,145,,,,,138,141',
',,148,149,132,133,135,136,,140,144,,,138,141,,134,148,149,132,133,135',
'136,,140,144,142,146,,,,134,,,,137,139,143,145,,,142,146,,,,,,,254,137',
'139,143,145,,,,,,,146,,148,149,132,133,135,136,137,140,144,,,138,141',
'146,134,148,149,132,133,135,136,137,140,144,,,,,,134,,146,,148,149,132',
'133,135,136,137,140,144,,,,,146,134,148,149,132,133,135,136,137,140',
'144,,,,,,134,,,,148,149,132,133,135,136,,140,144,,,,,,134,148,149,132',
'133,135,136,,140,144,205,206,208,189,191,134,195,197,200,201,203,,207',
'209,,,,,,199,202,204,205,206,208,189,191,,195,197,200,201,215,,207,209',
',190,194,,,199,202,204,205,206,208,189,191,,195,197,200,201,215,,207',
'209,,190,194,,,199,202,204,205,206,208,189,191,,195,197,200,201,203',
',207,209,,190,194,,,199,202,204,205,206,208,189,191,,195,197,200,201',
'215,,207,209,,190,194,,,199,202,204,205,206,208,189,191,,195,197,200',
'201,203,,207,209,,190,194,,,199,202,204,148,149,132,133,135,136,,140',
'144,,,,,,134,190,194,148,149,132,133,135,136,,140,144,,,,,,134' ]
        racc_action_table = arr = ::Array.new(2463, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,88,88,71,75,321,23,123,23,95,286,14,123,321,88,88,251,227,227,14',
'71,23,75,88,88,88,88,0,21,0,0,227,0,0,95,0,0,0,250,0,0,0,147,147,0,23',
'88,88,0,147,88,88,88,88,88,88,249,88,88,0,230,230,210,247,88,0,21,280',
'280,21,147,295,147,147,318,147,147,318,147,147,147,280,147,147,147,393',
'393,147,21,210,210,147,393,230,246,295,295,230,230,78,78,230,147,225',
'225,230,78,225,147,230,287,243,244,393,287,393,393,287,393,393,230,393',
'393,393,243,393,393,393,248,248,393,312,312,242,393,248,225,78,174,299',
'225,225,282,282,225,393,177,240,225,282,299,393,225,12,177,299,248,12',
'248,248,239,248,248,225,248,248,248,179,248,248,248,121,121,248,271',
'121,174,248,179,174,282,273,273,179,255,255,273,273,248,372,372,255',
'1,273,248,129,1,129,174,121,121,121,121,121,121,121,121,121,121,121',
'238,121,121,129,391,391,121,237,121,121,121,391,372,334,102,276,372',
'372,334,236,372,121,223,223,372,102,121,121,372,235,102,233,391,156',
'391,391,156,391,391,372,391,391,391,232,391,391,391,229,229,391,106',
'256,256,391,229,223,226,252,256,223,223,106,173,223,391,22,106,223,281',
'22,391,223,281,281,222,229,22,229,229,219,229,229,223,229,229,229,215',
'229,229,229,344,344,229,212,198,231,229,344,366,10,173,366,316,173,193',
'231,231,229,10,10,302,175,304,229,231,231,231,231,344,166,344,344,173',
'344,344,158,344,344,344,308,344,344,344,292,292,344,144,231,231,344',
'292,231,231,231,231,231,231,140,231,231,344,363,363,122,314,231,344',
'316,316,316,316,292,315,292,292,118,292,292,317,292,292,292,110,292',
'292,292,26,26,292,104,100,325,292,92,363,274,274,87,363,363,274,274',
'363,292,58,58,363,274,228,292,363,328,228,228,26,329,26,26,82,26,26',
'363,26,26,26,81,26,26,26,383,383,26,79,335,77,26,383,58,58,74,73,58',
'58,187,58,58,26,187,187,58,153,348,26,58,153,153,69,383,67,383,383,354',
'383,383,58,383,383,383,64,383,383,383,270,270,383,55,184,362,383,184',
'184,50,40,40,364,48,40,45,40,383,4,4,4,4,369,383,5,5,5,5,270,36,270',
'270,40,270,270,373,270,270,270,376,270,270,270,40,30,270,28,40,40,270',
'24,40,20,2,396,40,40,284,284,40,270,284,40,284,398,,270,13,13,,40,13',
',13,,,,145,145,284,,145,,145,47,47,47,47,,13,284,,,,284,284,,,284,145',
'13,,284,284,13,13,284,,13,284,145,,13,13,145,145,13,284,145,13,,,145',
'145,309,309,145,13,309,145,309,,,,35,35,,145,35,,35,,,,44,44,309,,44',
',44,11,11,11,11,,35,309,,,,309,309,,,309,44,35,,309,309,35,35,309,,35',
'309,44,,35,,44,44,35,309,44,,,,44,44,368,368,44,35,368,44,368,,,,143',
'143,,44,143,,143,,,,142,142,368,,142,,142,16,16,16,16,,143,368,,,,368',
'368,,,368,142,143,,368,368,143,143,368,,143,368,142,,143,143,142,142',
'143,368,142,143,,,142,142,65,65,142,143,65,142,65,,,,141,141,,142,141',
',141,,,,310,310,65,,310,,,,259,259,259,259,141,65,,259,259,65,65,,,65',
'259,141,,65,65,141,141,65,,141,65,310,,141,141,310,310,141,65,310,141',
',,310,,68,68,310,141,68,,68,,,,139,139,,310,139,,139,,,,293,293,68,',
'293,,293,,,,,,139,68,,,,68,68,,,68,293,139,,68,68,139,139,68,,139,68',
'293,,139,139,293,293,139,68,293,139,326,326,293,293,326,,293,139,,293',
'72,72,,,72,72,72,293,,,277,277,,,277,,277,,,,138,138,72,326,138,,138',
'326,326,,,326,277,72,,326,,72,72,326,,72,138,277,,72,72,277,277,72,326',
'277,72,138,,277,277,138,138,277,72,138,277,,,138,138,294,294,138,277',
'294,138,294,,,,137,137,,138,137,,137,,,,332,332,294,,332,,332,,,,,,137',
'294,,,,294,294,,,294,332,137,,294,294,137,137,294,,137,294,332,,137',
'137,332,332,137,294,332,137,,,332,332,331,331,332,137,331,332,331,,',
',83,83,,332,83,,83,,,,84,84,331,,84,,84,,,,,,83,331,,,,331,331,,,331',
'84,83,,331,331,83,83,331,,83,331,84,,83,83,84,84,83,331,84,83,,,84,84',
'85,85,84,83,85,84,85,,,,86,86,,84,86,,86,,,,136,136,85,,136,,136,,,',
',,86,85,,,,85,85,,,85,136,86,,85,85,86,86,85,,86,85,136,,86,86,136,136',
'86,85,136,86,,,136,136,8,8,136,86,8,136,8,,,,90,90,,136,90,,90,258,258',
'258,258,,8,,258,258,,,,,,258,90,8,91,91,,8,8,,,8,,90,,8,8,90,90,8,,90',
'8,,,90,90,,,90,8,,90,,,,,91,91,,90,91,91,,91,91,167,167,,91,167,,167',
'91,,,305,305,,,305,,305,,91,,,,167,,,,,,,,,,305,167,,,,167,167,,,167',
',305,,167,167,305,305,167,,305,167,165,,305,305,,,305,167,,305,165,165',
',,,,,305,,165,165,165,165,,,,,,319,319,103,103,,,103,319,103,,,,,,165',
'165,,,165,165,165,165,165,165,103,165,165,,,,135,135,165,319,135,103',
'135,319,319,103,103,319,,103,,319,,103,103,319,,103,135,,103,134,134',
',,134,319,134,103,135,,,,135,135,,,135,,,,135,135,134,,135,155,155,135',
',155,,155,,134,,135,,134,134,,,134,109,109,,134,134,155,109,134,,,134',
',,,,,155,,134,,155,155,,,155,,,,155,155,154,154,155,109,154,155,154',
'109,109,,,109,,155,,109,,,,109,112,112,154,154,112,,112,,,,109,,,154',
',,,154,154,,,154,112,112,,154,154,,,154,,,154,112,,,,112,112,,154,112',
',,,112,112,,,112,113,113,112,,113,113,113,,,,112,,,,,,,133,133,,,133',
'113,133,,,,,,,,,,113,,,,113,113,133,,113,,,,113,113,,,113,133,,113,',
'133,133,,,133,,113,,133,133,132,132,133,,132,133,132,,,,117,117,,133',
'117,,117,,,,148,148,132,,148,,148,,,,,,117,132,,,,132,132,,,132,148',
'117,,132,132,117,117,132,,117,132,148,,117,117,148,148,117,132,148,117',
',,148,148,149,149,148,117,149,148,149,,,,146,146,,148,146,,146,,,,,',
'149,,,,,,,,,,146,149,,,,149,149,,,149,,146,,149,149,146,146,149,,146',
'149,,116,146,146,,,146,149,,146,116,116,,,,,66,146,,116,116,116,116',
',,66,66,,,,,,,,66,66,66,66,,,,,116,116,,,116,116,116,116,116,116,,116',
'116,,,66,66,,116,66,66,66,66,66,66,114,66,66,,,,,,66,114,114,,,,,,,',
'114,114,114,114,,,343,343,,,,,,,,343,343,343,343,,,,,114,114,,,114,114',
'114,114,114,114,,114,114,,,343,343,,114,343,343,343,343,343,343,,343',
'343,163,163,,,,343,,,,163,163,163,163,,,164,164,,,,,,,,164,164,164,164',
',,,,163,163,,,163,163,163,163,163,163,,163,163,,,164,164,,163,164,164',
'164,164,164,164,,164,164,170,170,,,,164,,,,170,170,170,170,,,338,338',
',,,,,,,338,338,338,338,,,,,170,170,,,170,170,170,170,170,170,,170,170',
',,338,338,,170,338,338,338,338,338,338,,338,338,261,261,,,,338,,,,261',
'261,261,261,,,350,350,,,,,,,,350,350,350,350,,,,,,261,,,261,261,261',
'261,261,261,,261,261,,,,,,261,350,350,350,350,350,350,,350,350,351,351',
',,,350,,,,351,351,351,351,,,151,151,,,,,,,,151,151,151,151,,,,,,,,,351',
'351,351,351,351,351,,351,351,,,151,151,,351,151,151,151,151,151,151',
',151,151,357,357,,,,151,,,,357,357,357,357,,,360,360,,,,,,,,360,360',
'360,360,,,,,357,357,,,357,357,357,357,357,357,,357,357,,,360,360,,357',
'360,360,360,360,360,360,,360,360,379,379,,,,360,,,,379,379,379,379,',
',380,380,,,,,,,,380,380,380,380,,,,,379,379,,,379,379,379,379,379,379',
',379,379,,,380,380,,379,380,380,380,380,380,380,,380,380,264,264,,,',
'380,,,,264,264,264,264,,,131,131,,,,,,,131,131,131,131,131,,,,,,,268',
',264,264,264,264,264,264,268,264,264,,,131,131,262,264,131,131,131,131',
'131,131,262,131,131,,,,,,131,,265,,268,268,268,268,268,268,265,268,268',
',,,,266,268,262,262,262,262,262,262,266,262,262,,,,,,262,,,,265,265',
'265,265,265,265,,265,265,,,,,,265,266,266,266,266,266,266,,266,266,327',
'327,327,327,327,266,327,327,327,327,327,,327,327,,,,,,327,327,327,307',
'307,307,307,307,,307,307,307,307,307,,307,307,,327,327,,,307,307,307',
'107,107,107,107,107,,107,107,107,107,107,,107,107,,307,307,,,107,107',
'107,105,105,105,105,105,,105,105,105,105,105,,105,105,,107,107,,,105',
'105,105,188,188,188,188,188,,188,188,188,188,188,,188,188,,105,105,',
',188,188,188,303,303,303,303,303,,303,303,303,303,303,,303,303,,188',
'188,,,303,303,303,260,260,260,260,260,260,,260,260,,,,,,260,303,303',
'269,269,269,269,269,269,,269,269,,,,,,269' ]
        racc_action_check = arr = ::Array.new(2463, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   157,   482,   nil,   428,   434,   nil,   nil,  1137,   nil,
   304,   561,   118,   538,    -3,   nil,   628,   nil,   nil,   nil,
   525,    27,   240,     1,   515,   nil,   385,   nil,   496,   nil,
   494,   nil,   nil,   nil,   nil,   605,   479,   nil,   nil,   nil,
   481,   nil,   nil,   nil,   615,   482,   nil,   494,   484,   nil,
   474,   nil,   nil,   nil,   nil,   452,   nil,   nil,   403,   nil,
   nil,   nil,   nil,   nil,   463,   729,  1685,   436,   796,   434,
   nil,    -2,   869,   418,   417,    -1,   nil,   412,    98,   410,
   nil,   403,   413,  1013,  1023,  1070,  1080,   374,    -2,   nil,
  1147,  1171,   394,   nil,   nil,    -2,   nil,   nil,   nil,   nil,
   383,   nil,   201,  1296,   382,  2335,   237,  2313,   nil,  1391,
   371,   nil,  1441,  1491,  1736,   nil,  1670,  1565,   364,   nil,
   nil,   170,   356,   -27,   nil,   nil,   nil,   nil,   nil,   190,
   nil,  2171,  1555,  1508,  1349,  1324,  1090,   946,   889,   806,
   296,   739,   682,   672,   285,   548,  1632,    41,  1575,  1622,
   nil,  1991,   nil,   444,  1421,  1374,   235,   nil,   325,   nil,
   nil,   nil,   nil,  1796,  1811,  1261,   293,  1213,   nil,   nil,
  1856,   nil,   nil,   271,   137,   314,   nil,   129,   nil,   144,
   nil,   nil,   nil,   nil,   431,   nil,   nil,   437,  2357,   nil,
   nil,   nil,   nil,   303,   nil,   nil,   nil,   nil,   294,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    41,   nil,   292,   nil,   nil,   245,   nil,   nil,   nil,   279,
   nil,   nil,   261,   231,   nil,   102,   244,     7,   402,   256,
    59,   299,   252,   201,   nil,   220,   218,   195,   188,   138,
   125,   nil,   111,   101,    90,   nil,    89,    41,   127,    42,
    24,    -8,   256,   nil,   nil,   125,   202,   nil,  1103,   706,
  2378,  1916,  2204,   nil,  2156,  2222,  2237,   nil,  2189,  2395,
   471,   166,   nil,   127,   341,   nil,   219,   879,   nil,   nil,
    57,   272,   141,   nil,   528,   nil,     3,    75,   nil,   nil,
   nil,   nil,   342,   816,   936,    47,   nil,   nil,   nil,   116,
   nil,   nil,   309,  2379,   314,  1223,   nil,  2291,   331,   595,
   749,   nil,   121,   nil,   340,   350,   305,   370,    44,  1294,
   nil,    -6,   nil,   nil,   nil,   383,   859,  2269,   403,   407,
   nil,  1003,   956,   nil,   189,   409,   nil,   nil,  1871,   nil,
   nil,   nil,   nil,  1751,   299,   nil,   nil,   nil,   443,   nil,
  1931,  1976,   nil,   nil,   453,   nil,   nil,  2036,   nil,   nil,
  2051,   nil,   469,   360,   476,   nil,   278,   nil,   662,   487,
   nil,   nil,   188,   500,   nil,   nil,   500,   nil,   nil,  2096,
  2111,   nil,   nil,   428,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   213,   nil,    84,   nil,   nil,   518,   nil,   528,   nil,
   nil,   nil ]

racc_action_default = [
  -205,  -242,   -74,   -19,    -8,   -20,    -9,  -185,  -242,  -124,
  -222,   -10,  -197,  -242,  -240,   -98,  -242,   -11,  -176,   -12,
  -242,  -242,  -242,  -177,   -39,   -13,    -1,  -181,  -242,  -129,
   -41,   -14,    -2,  -230,   -96,   -97,   -42,   -15,    -3,  -180,
  -242,   -43,   -16,  -182,  -242,   -45,   -17,    -6,  -242,  -184,
  -242,   -18,    -7,  -197,  -196,  -205,   -75,   -49,  -242,   -46,
   -47,   -48,  -142,  -141,  -222,  -242,  -242,  -240,  -242,   -59,
   -66,   -60,  -242,   -63,   -61,   -97,   -64,   -58,  -242,   -67,
   -62,   -68,   -65,  -242,  -242,  -242,  -242,  -205,  -242,  -125,
  -242,  -242,  -242,  -204,  -202,  -205,  -198,  -200,  -201,  -203,
  -242,   -73,  -205,  -242,   -77,  -109,  -205,  -119,    -4,  -242,
   -53,   -54,  -242,  -242,  -242,  -134,  -242,  -242,  -189,  -186,
  -187,  -109,  -242,  -206,  -207,   -40,   -44,   -37,   -39,   -97,
   -38,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,
  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,
  -159,   -56,  -225,  -242,  -242,  -242,  -242,  -234,  -242,  -238,
  -237,  -233,  -152,  -106,  -108,  -242,  -205,  -242,  -127,  -126,
  -107,   -36,   402,  -242,  -242,  -242,  -216,  -242,  -222,  -205,
   -90,   -89,   -80,   -97,  -242,   -81,   -83,  -242,  -119,   -25,
   -29,   -27,  -113,  -228,   -35,   -23,  -110,   -31,  -242,   -33,
   -32,  -114,   -21,  -112,   -34,   -28,   -26,   -22,   -30,   -24,
  -242,  -117,  -228,  -118,  -120,  -112,  -183,  -177,  -179,  -242,
  -178,  -170,   -97,  -242,  -171,  -242,   -52,  -242,  -242,  -242,
  -242,  -242,  -242,   -94,   -92,  -242,  -228,  -100,  -101,  -114,
  -103,  -104,   -99,   -97,   -34,  -102,  -105,   -24,  -242,  -215,
  -213,  -242,  -228,  -210,  -162,  -149,  -148,  -143,  -150,  -151,
  -154,  -161,  -156,  -144,  -160,  -158,  -155,  -145,  -157,  -153,
    -5,  -242,  -133,  -146,  -147,  -226,  -227,  -242,  -223,  -123,
  -242,  -242,  -242,  -231,  -242,  -239,  -242,  -242,  -218,  -128,
  -199,  -217,  -242,  -242,  -242,  -242,   -78,   -86,   -85,  -242,
  -227,  -131,  -228,  -229,  -242,  -242,   -79,  -229,  -242,  -242,
  -242,  -173,  -228,   -55,  -227,   -50,  -223,  -242,  -137,  -242,
  -164,  -242,  -168,  -241,  -188,  -242,   -95,  -109,  -242,  -242,
  -191,  -242,  -242,  -208,  -229,  -242,  -132,  -224,   -57,  -122,
  -130,  -235,  -232,  -236,  -242,  -221,  -220,  -219,  -242,  -195,
   -87,   -88,   -84,   -82,  -242,  -111,   -71,  -115,  -121,   -72,
  -116,  -175,  -227,  -242,  -242,   -51,  -137,  -136,  -242,  -242,
  -165,  -163,  -242,  -242,   -69,   -93,  -228,   -70,  -190,  -214,
  -212,  -211,  -209,  -242,  -193,  -194,   -76,  -174,  -172,  -135,
  -138,  -242,  -169,  -242,   -91,  -192,  -242,  -140,  -242,  -167,
  -139,  -166 ]

racc_goto_table = [
    23,    55,    26,    27,   111,   108,   115,   253,   157,   219,
   271,   120,    87,    89,   193,   234,    39,   224,    32,    93,
   241,   211,   100,    96,   184,   304,    23,   320,   210,    27,
   236,   101,   367,   212,   104,   153,    58,   125,   319,   127,
   358,   353,    39,   221,   308,    43,   126,    91,   169,   122,
   312,   325,   118,   233,   286,    95,   175,   363,    23,   291,
   251,    27,    24,   252,   110,   347,   187,   130,   328,    45,
   125,    43,   171,   124,    39,   227,   228,   156,    20,   126,
   389,   166,   nil,   nil,   335,   nil,   nil,   nil,    24,   nil,
   nil,    23,   317,   nil,    27,    45,   nil,   nil,   nil,   nil,
   130,   295,   211,    43,   nil,   124,   nil,    39,   nil,   217,
   nil,   329,    27,   176,   302,   nil,   370,   280,   281,   nil,
   128,   238,    18,   219,    27,    39,   nil,    45,   nil,   nil,
   322,   311,   nil,   nil,   354,   nil,    43,    39,   263,   nil,
   nil,   nil,   267,   nil,   364,   nil,   nil,    23,    18,   nil,
    27,   nil,   nil,   128,    43,   348,   nil,   nil,   nil,   nil,
    45,   nil,   nil,    39,   nil,   nil,    43,   289,   nil,   nil,
   nil,    93,    93,   nil,   nil,   290,    41,   nil,   nil,   nil,
    18,    14,   nil,   nil,   288,   nil,   nil,   nil,   nil,   nil,
   246,   nil,    43,   nil,   313,   324,   nil,   nil,   nil,   nil,
   nil,   nil,    41,   nil,   nil,   nil,   nil,    14,   394,    24,
   nil,   nil,   341,    18,   nil,   nil,    45,   355,   381,   322,
   375,   211,   nil,   217,   180,   241,    27,   nil,   180,    23,
   217,    18,    27,    27,    41,   nil,   376,   nil,   nil,    39,
   nil,   nil,   nil,   237,   nil,    39,    39,   nil,    23,   108,
   nil,    27,   nil,   nil,   396,   nil,   398,   nil,   nil,   nil,
   nil,   nil,   nil,   219,    39,   nil,   nil,    41,    43,    18,
    23,   387,   392,    27,    43,    43,   nil,   nil,   nil,   361,
   nil,   nil,   nil,   nil,   nil,   nil,    39,   346,   nil,   nil,
   216,    24,    23,    43,   nil,    27,   nil,   245,    45,   nil,
   nil,   180,   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,
    24,   nil,   nil,   nil,   nil,    43,   nil,    45,   nil,   217,
   nil,   nil,    27,    41,   nil,   nil,   238,   nil,    14,    27,
   nil,   nil,    24,   nil,   390,    39,   nil,    43,   nil,    45,
   nil,   nil,    39,   nil,    23,    18,   383,    27,   nil,   nil,
   nil,    18,    18,   nil,    24,   nil,   nil,   nil,   nil,   nil,
    39,    45,   108,   217,    43,   nil,    27,   nil,   nil,   nil,
    18,    43,   217,   nil,   nil,    27,   nil,   nil,   nil,    39,
   nil,   nil,   nil,    23,   nil,   nil,    27,   nil,    39,    43,
   nil,    23,    18,    23,    27,   246,    27,   nil,   nil,    39,
   nil,    30,   nil,   nil,   216,    41,    24,    39,    43,    39,
    14,   216,   nil,    45,    18,   nil,   nil,    43,   nil,   nil,
   nil,   180,   nil,   nil,    41,   nil,   nil,    30,    43,    14,
   nil,   nil,   nil,   nil,   nil,   nil,    43,   nil,    43,   nil,
   nil,    18,   nil,   nil,   nil,    24,    41,   nil,   237,   nil,
   nil,    14,    45,    24,   nil,    24,    36,   nil,   nil,    30,
    45,   nil,    45,   nil,   nil,   nil,    18,   nil,    41,   nil,
   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    36,   nil,   nil,    18,   nil,   nil,   nil,   nil,
   nil,   nil,    30,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   216,   nil,   245,   181,   nil,    18,   nil,   181,   nil,   nil,
   218,   nil,   nil,    18,    36,    18,   nil,   nil,   nil,   nil,
    41,   nil,   240,   nil,   nil,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   159,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   216,   nil,   nil,    36,    30,   nil,
   nil,   nil,   nil,   216,   nil,   nil,   nil,   nil,   nil,    41,
   nil,   nil,   nil,   nil,    14,   220,   nil,    41,   nil,    41,
   nil,   nil,    14,   nil,    14,   nil,   nil,   242,   nil,   nil,
   181,    66,   nil,   nil,   nil,   nil,    88,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   114,   nil,   nil,   nil,   116,   nil,   nil,
   nil,   nil,   nil,   nil,   218,   nil,   nil,   nil,   nil,   nil,
    30,   218,   nil,   nil,   nil,   nil,   nil,   nil,   131,   nil,
   nil,   150,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,
   nil,   nil,   nil,   nil,   nil,   nil,   162,   163,   164,   165,
   nil,   nil,   nil,   170,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   220,
   nil,   nil,   nil,   nil,   nil,    36,   220,   nil,   nil,   nil,
   231,   nil,   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,
   181,   nil,   nil,   nil,    36,   255,   256,   257,   258,   259,
   260,   261,   262,   nil,   264,   265,   266,   nil,   268,   269,
   218,   273,   274,   nil,   nil,   nil,    36,   240,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   159,   nil,
    88,   nil,   nil,   nil,   nil,    30,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   218,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   218,   nil,   220,   nil,   nil,   nil,   nil,
   nil,   nil,   242,   nil,    30,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    30,   nil,    30,   nil,   nil,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   220,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   220,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,    36,
   338,   nil,   nil,   nil,   nil,   nil,   nil,   343,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   350,   351,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   357,   nil,
   nil,   nil,   360,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   379,   380,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   114 ]

racc_goto_check = [
    35,    40,     2,    36,    31,     4,    62,    83,    86,    69,
     5,    73,    40,    60,    43,    53,    38,    71,     3,    65,
    37,    56,    35,    79,    48,    44,    35,    67,    48,    36,
    43,     6,    63,    45,    47,    29,    23,     8,    66,    22,
    59,    49,    38,    70,    44,    39,    10,    23,    61,    75,
    72,    42,    74,    41,    76,    77,    78,    33,    35,    80,
    81,    36,    24,    82,    30,    84,    29,     6,    44,    28,
     8,    39,    22,     3,    38,    29,    29,    85,     1,    10,
    63,    75,   nil,   nil,    44,   nil,   nil,   nil,    24,   nil,
   nil,    35,     5,   nil,    36,    28,   nil,   nil,   nil,   nil,
     6,    48,    56,    39,   nil,     3,   nil,    38,   nil,    35,
   nil,     5,    36,     3,    45,   nil,    67,    29,    29,   nil,
    24,    35,    34,    69,    36,    38,   nil,    28,   nil,   nil,
    69,    71,   nil,   nil,    44,   nil,    39,    38,    65,   nil,
   nil,   nil,    65,   nil,    44,   nil,   nil,    35,    34,   nil,
    36,   nil,   nil,    24,    39,     5,   nil,   nil,   nil,   nil,
    28,   nil,   nil,    38,   nil,   nil,    39,    60,   nil,   nil,
   nil,    65,    65,   nil,   nil,    79,    27,   nil,   nil,   nil,
    34,    55,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,
    28,   nil,    39,   nil,    31,    73,   nil,   nil,   nil,   nil,
   nil,   nil,    27,   nil,   nil,   nil,   nil,    55,    44,    24,
   nil,   nil,    86,    34,   nil,   nil,    28,    56,    83,    69,
    53,    56,   nil,    35,    34,    37,    36,   nil,    34,    35,
    35,    34,    36,    36,    27,   nil,    43,   nil,   nil,    38,
   nil,   nil,   nil,    34,   nil,    38,    38,   nil,    35,     4,
   nil,    36,   nil,   nil,     5,   nil,     5,   nil,   nil,   nil,
   nil,   nil,   nil,    69,    38,   nil,   nil,    27,    39,    34,
    35,    71,    69,    36,    39,    39,   nil,   nil,   nil,    31,
   nil,   nil,   nil,   nil,   nil,   nil,    38,    40,   nil,   nil,
    55,    24,    35,    39,   nil,    36,   nil,    27,    28,   nil,
   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,
    24,   nil,   nil,   nil,   nil,    39,   nil,    28,   nil,    35,
   nil,   nil,    36,    27,   nil,   nil,    35,   nil,    55,    36,
   nil,   nil,    24,   nil,    62,    38,   nil,    39,   nil,    28,
   nil,   nil,    38,   nil,    35,    34,     2,    36,   nil,   nil,
   nil,    34,    34,   nil,    24,   nil,   nil,   nil,   nil,   nil,
    38,    28,     4,    35,    39,   nil,    36,   nil,   nil,   nil,
    34,    39,    35,   nil,   nil,    36,   nil,   nil,   nil,    38,
   nil,   nil,   nil,    35,   nil,   nil,    36,   nil,    38,    39,
   nil,    35,    34,    35,    36,    28,    36,   nil,   nil,    38,
   nil,    25,   nil,   nil,    55,    27,    24,    38,    39,    38,
    55,    55,   nil,    28,    34,   nil,   nil,    39,   nil,   nil,
   nil,    34,   nil,   nil,    27,   nil,   nil,    25,    39,    55,
   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,    39,   nil,
   nil,    34,   nil,   nil,   nil,    24,    27,   nil,    34,   nil,
   nil,    55,    28,    24,   nil,    24,    26,   nil,   nil,    25,
    28,   nil,    28,   nil,   nil,   nil,    34,   nil,    27,   nil,
   nil,   nil,   nil,    55,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   nil,   nil,    34,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,    34,   nil,   nil,   nil,   nil,   nil,
    55,   nil,    27,    25,   nil,    34,   nil,    25,   nil,   nil,
    25,   nil,   nil,    34,    26,    34,   nil,   nil,   nil,   nil,
    27,   nil,    25,   nil,   nil,    55,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    55,   nil,   nil,    26,    25,   nil,
   nil,   nil,   nil,    55,   nil,   nil,   nil,   nil,   nil,    27,
   nil,   nil,   nil,   nil,    55,    26,   nil,    27,   nil,    27,
   nil,   nil,    55,   nil,    55,   nil,   nil,    26,   nil,   nil,
    25,    32,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,    32,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
    25,    25,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,
   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,   nil,    32,    32,    32,    32,
   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,    26,    26,   nil,   nil,   nil,
    32,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
    25,   nil,   nil,   nil,    26,    32,    32,    32,    32,    32,
    32,    32,    32,   nil,    32,    32,    32,   nil,    32,    32,
    25,    32,    32,   nil,   nil,   nil,    26,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,
    32,   nil,   nil,   nil,   nil,    25,   nil,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    25,   nil,    26,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,    25,   nil,   nil,   nil,   nil,   nil,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,    26,
    32,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    32,    32,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    32 ]

racc_goto_pointer = [
   nil,    78,     2,    18,   -21,  -137,     9,   nil,   -21,   nil,
   -12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -19,    31,    62,   401,   456,   176,    69,   -37,
    29,   -31,   573,  -255,   122,     0,     3,  -101,    16,    45,
     0,   -68,  -182,   -91,  -168,   -74,   nil,    11,   -78,  -258,
   nil,   nil,   nil,  -106,   nil,   181,   -86,   nil,   nil,  -267,
     0,   -40,   -34,  -286,   nil,    -2,  -192,  -203,   nil,  -100,
   -66,   -92,  -173,   -37,     4,    -6,  -112,    34,   -39,     2,
  -115,   -63,   -60,  -116,  -222,    -1,   -70,   nil ]

racc_goto_default = [
   nil,   nil,   270,   182,    38,   nil,    47,    52,     4,     6,
    11,    17,    19,    25,    31,    37,    42,    46,    51,     3,
     5,   192,    16,   nil,    70,    73,    77,    80,    82,   nil,
   nil,    63,   151,   277,    69,    71,    74,    76,    79,    81,
    50,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   185,
   299,   186,   177,   nil,   235,    67,   196,   198,   213,   214,
   nil,   nil,   nil,   nil,    62,     7,   nil,   nil,   321,    28,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    97,   nil,   nil,   nil,   nil,   nil,   nil,   158 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 71, :_reduce_3,
  2, 71, :_reduce_4,
  1, 74, :_reduce_5,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  3, 89, :_reduce_36,
  3, 89, :_reduce_37,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  4, 83, :_reduce_50,
  5, 83, :_reduce_51,
  3, 83, :_reduce_52,
  2, 83, :_reduce_53,
  1, 99, :_reduce_54,
  3, 99, :_reduce_55,
  1, 98, :_reduce_56,
  3, 98, :_reduce_57,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  5, 75, :_reduce_69,
  5, 75, :_reduce_70,
  5, 75, :_reduce_71,
  5, 87, :_reduce_72,
  2, 76, :_reduce_73,
  1, 115, :_reduce_74,
  2, 115, :_reduce_75,
  6, 77, :_reduce_76,
  2, 77, :_reduce_77,
  3, 116, :_reduce_78,
  3, 116, :_reduce_79,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  3, 117, :_reduce_82,
  1, 118, :_reduce_none,
  3, 118, :_reduce_84,
  1, 119, :_reduce_85,
  1, 119, :_reduce_86,
  3, 120, :_reduce_87,
  3, 120, :_reduce_88,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  4, 122, :_reduce_91,
  1, 110, :_reduce_92,
  3, 110, :_reduce_93,
  0, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 108, :_reduce_96,
  1, 103, :_reduce_97,
  1, 104, :_reduce_98,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  3, 78, :_reduce_106,
  3, 78, :_reduce_107,
  3, 88, :_reduce_108,
  0, 112, :_reduce_109,
  1, 112, :_reduce_110,
  3, 112, :_reduce_111,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 125, :_reduce_115,
  3, 127, :_reduce_116,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  0, 114, :_reduce_119,
  1, 114, :_reduce_120,
  3, 114, :_reduce_121,
  4, 107, :_reduce_122,
  3, 107, :_reduce_123,
  1, 95, :_reduce_124,
  2, 95, :_reduce_125,
  2, 129, :_reduce_126,
  1, 130, :_reduce_127,
  2, 130, :_reduce_128,
  1, 105, :_reduce_129,
  4, 93, :_reduce_130,
  4, 93, :_reduce_131,
  5, 81, :_reduce_132,
  4, 81, :_reduce_133,
  2, 80, :_reduce_134,
  5, 131, :_reduce_135,
  4, 131, :_reduce_136,
  0, 132, :_reduce_none,
  2, 132, :_reduce_138,
  4, 132, :_reduce_139,
  3, 132, :_reduce_140,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  3, 101, :_reduce_143,
  3, 101, :_reduce_144,
  3, 101, :_reduce_145,
  3, 101, :_reduce_146,
  3, 101, :_reduce_147,
  3, 101, :_reduce_148,
  3, 101, :_reduce_149,
  3, 101, :_reduce_150,
  3, 101, :_reduce_151,
  2, 101, :_reduce_152,
  3, 101, :_reduce_153,
  3, 101, :_reduce_154,
  3, 101, :_reduce_155,
  3, 101, :_reduce_156,
  3, 101, :_reduce_157,
  3, 101, :_reduce_158,
  2, 101, :_reduce_159,
  3, 101, :_reduce_160,
  3, 101, :_reduce_161,
  3, 101, :_reduce_162,
  5, 79, :_reduce_163,
  1, 135, :_reduce_164,
  2, 135, :_reduce_165,
  5, 136, :_reduce_166,
  4, 136, :_reduce_167,
  1, 137, :_reduce_168,
  3, 137, :_reduce_169,
  3, 96, :_reduce_170,
  1, 139, :_reduce_none,
  4, 139, :_reduce_172,
  1, 141, :_reduce_none,
  3, 141, :_reduce_174,
  3, 140, :_reduce_175,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_184,
  1, 138, :_reduce_none,
  1, 142, :_reduce_186,
  1, 143, :_reduce_none,
  3, 143, :_reduce_188,
  2, 82, :_reduce_189,
  6, 84, :_reduce_190,
  5, 84, :_reduce_191,
  7, 85, :_reduce_192,
  6, 85, :_reduce_193,
  6, 86, :_reduce_194,
  5, 86, :_reduce_195,
  1, 109, :_reduce_196,
  1, 109, :_reduce_197,
  1, 146, :_reduce_198,
  3, 146, :_reduce_199,
  1, 148, :_reduce_200,
  1, 149, :_reduce_201,
  1, 149, :_reduce_202,
  1, 149, :_reduce_203,
  1, 149, :_reduce_none,
  0, 72, :_reduce_205,
  0, 150, :_reduce_206,
  1, 144, :_reduce_none,
  3, 144, :_reduce_208,
  4, 144, :_reduce_209,
  1, 151, :_reduce_none,
  3, 151, :_reduce_211,
  3, 152, :_reduce_212,
  1, 152, :_reduce_213,
  3, 152, :_reduce_214,
  1, 152, :_reduce_215,
  1, 147, :_reduce_none,
  2, 147, :_reduce_217,
  1, 145, :_reduce_none,
  2, 145, :_reduce_219,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 94, :_reduce_222,
  3, 106, :_reduce_223,
  4, 106, :_reduce_224,
  2, 106, :_reduce_225,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  0, 113, :_reduce_none,
  1, 113, :_reduce_229,
  1, 134, :_reduce_230,
  3, 133, :_reduce_231,
  4, 133, :_reduce_232,
  2, 133, :_reduce_233,
  1, 154, :_reduce_none,
  3, 154, :_reduce_235,
  3, 155, :_reduce_236,
  1, 156, :_reduce_237,
  1, 156, :_reduce_238,
  4, 124, :_reduce_239,
  1, 97, :_reduce_none,
  4, 97, :_reduce_241 ]

racc_reduce_n = 242

racc_shift_n = 402

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.ra', 89)
  def _reduce_36(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_37(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'grammar.ra', 107)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 114)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 127)
  def _reduce_53(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_54(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_57(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'grammar.ra', 157)
  def _reduce_69(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 160)
  def _reduce_70(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 163)
  def _reduce_71(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 170)
  def _reduce_72(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 177)
  def _reduce_73(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 193)
  def _reduce_74(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 194)
  def _reduce_75(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_76(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 217)
  def _reduce_77(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 235)
  def _reduce_78(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 243)
  def _reduce_79(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'grammar.ra', 256)
  def _reduce_82(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'grammar.ra', 261)
  def _reduce_84(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 265)
  def _reduce_85(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_86(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 269)
  def _reduce_87(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 274)
  def _reduce_88(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'grammar.ra', 283)
  def _reduce_91(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 286)
  def _reduce_92(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 288)
  def _reduce_93(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'grammar.ra', 296)
  def _reduce_96(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 300)
  def _reduce_97(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 304)
  def _reduce_98(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

module_eval(<<'.,.,', 'grammar.ra', 316)
  def _reduce_106(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 322)
  def _reduce_107(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 326)
  def _reduce_108(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 332)
  def _reduce_109(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 334)
  def _reduce_110(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 336)
  def _reduce_111(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_115(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 352)
  def _reduce_116(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'grammar.ra', 361)
  def _reduce_119(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 363)
  def _reduce_120(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 365)
  def _reduce_121(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 371)
  def _reduce_122(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 376)
  def _reduce_123(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 382)
  def _reduce_124(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 383)
  def _reduce_125(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 385)
  def _reduce_126(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 387)
  def _reduce_127(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 388)
  def _reduce_128(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 391)
  def _reduce_129(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 395)
  def _reduce_130(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 398)
  def _reduce_131(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 402)
  def _reduce_132(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 411)
  def _reduce_133(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 420)
  def _reduce_134(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 424)
  def _reduce_135(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 435)
  def _reduce_136(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.ra', 448)
  def _reduce_138(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 451)
  def _reduce_139(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 455)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'grammar.ra', 474)
  def _reduce_143(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 477)
  def _reduce_144(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 480)
  def _reduce_145(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 483)
  def _reduce_146(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 486)
  def _reduce_147(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 489)
  def _reduce_148(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 492)
  def _reduce_149(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 495)
  def _reduce_150(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 498)
  def _reduce_151(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 501)
  def _reduce_152(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 504)
  def _reduce_153(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 507)
  def _reduce_154(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 510)
  def _reduce_155(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 513)
  def _reduce_156(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 516)
  def _reduce_157(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 519)
  def _reduce_158(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 522)
  def _reduce_159(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 525)
  def _reduce_160(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 528)
  def _reduce_161(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 531)
  def _reduce_162(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 535)
  def _reduce_163(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_164(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 541)
  def _reduce_165(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_166(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 549)
  def _reduce_167(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 559)
  def _reduce_168(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 561)
  def _reduce_169(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 566)
  def _reduce_170(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 171 omitted

module_eval(<<'.,.,', 'grammar.ra', 571)
  def _reduce_172(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 173 omitted

module_eval(<<'.,.,', 'grammar.ra', 577)
  def _reduce_174(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 586)
  def _reduce_175(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

module_eval(<<'.,.,', 'grammar.ra', 598)
  def _reduce_184(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 185 omitted

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_186(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'grammar.ra', 605)
  def _reduce_188(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 608)
  def _reduce_189(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 618)
  def _reduce_190(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 626)
  def _reduce_191(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 634)
  def _reduce_192(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 641)
  def _reduce_193(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 650)
  def _reduce_194(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 655)
  def _reduce_195(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 659)
  def _reduce_196(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 660)
  def _reduce_197(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 665)
  def _reduce_198(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 668)
  def _reduce_199(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 673)
  def _reduce_200(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 676)
  def _reduce_201(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 677)
  def _reduce_202(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 678)
  def _reduce_203(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 204 omitted

module_eval(<<'.,.,', 'grammar.ra', 682)
  def _reduce_205(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 686)
  def _reduce_206(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 207 omitted

module_eval(<<'.,.,', 'grammar.ra', 691)
  def _reduce_208(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 694)
  def _reduce_209(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 210 omitted

module_eval(<<'.,.,', 'grammar.ra', 700)
  def _reduce_211(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 706)
  def _reduce_212(val, _values, result)
      Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 710)
  def _reduce_213(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 713)
  def _reduce_214(val, _values, result)
      result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 715)
  def _reduce_215(val, _values, result)
      result = [val[0][:value]]

    result
  end
.,.,

# reduce 216 omitted

module_eval(<<'.,.,', 'grammar.ra', 720)
  def _reduce_217(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 218 omitted

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_219(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 220 omitted

# reduce 221 omitted

module_eval(<<'.,.,', 'grammar.ra', 731)
  def _reduce_222(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 734)
  def _reduce_223(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 735)
  def _reduce_224(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 736)
  def _reduce_225(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

module_eval(<<'.,.,', 'grammar.ra', 742)
  def _reduce_229(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 745)
  def _reduce_230(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 749)
  def _reduce_231(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 756)
  def _reduce_232(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 762)
  def _reduce_233(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 234 omitted

module_eval(<<'.,.,', 'grammar.ra', 767)
  def _reduce_235(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 776)
  def _reduce_236(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 779)
  def _reduce_237(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 780)
  def _reduce_238(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 783)
  def _reduce_239(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 240 omitted

module_eval(<<'.,.,', 'grammar.ra', 788)
  def _reduce_241(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
