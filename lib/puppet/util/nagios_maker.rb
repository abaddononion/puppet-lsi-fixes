require 'puppet/external/nagios'
require 'puppet/external/nagios/base'
require 'puppet/provider/naginator'

module Puppet::Util::NagiosMaker
  # Create a new nagios type, using all of the parameters
  # from the parser.
  def self.create_nagios_type(name)
    name = name.to_sym
    full_name = ("nagios_#{name}").to_sym

    raise(Puppet::DevError, "No nagios type for #{name}") unless nagtype = Nagios::Base.type(name)

    type = Puppet::Type.newtype(full_name) {}

    type.ensurable

    type.newparam(nagtype.namevar, :namevar => true) do
      desc "The name of this nagios_#{nagtype.name} resource."
    end

    # We deduplicate the parameters because it makes sense to allow Naginator to have dupes.
    nagtype.parameters.uniq.each do |param|
      next if param == nagtype.namevar

      # We can't turn these parameter names into constants, so at least for now they aren't
      # supported.
      next if param.to_s =~ /^[0-9]/

      type.newproperty(param, :array_matching => :all) do
	desc "Nagios configuration file parameter."
	
	def change_to_s(currentvalue, newvalue)
	  currentvalue = currentvalue.join(",") if currentvalue != :absent and currentvalue.is_a?(Array)
	  currentvalue = currentvalue.to_s() if currentvalue.is_a?(Symbol)
	  newvalue = newvalue.join(",") if newvalue.is_a?(Array)
	  newvalue = newvalue.to_s() if newvalue.is_a?(Symbol)
	  super(currentvalue, newvalue)
	end

	def is_to_s(value)
	  if value.is_a?(Array)
	    if value.include?(:absent)
	      super
	    else
	      super(value.join(','))
	    end
	  else
	    super(value.to_s())
	  end
	end
	
	def should_to_s(value)
	  if value.is_a?(Array)
	    if value.include?(:absent)
	      super
	    else
	      super(value.join(','))
	    end
	  else
	    super(value.to_s())
	  end
	end
	
	def insync?(is)
          should_to_s(should) == is_to_s(is)
	end
      end
    end

    type.newproperty(:target) do
      desc 'The target.'

      defaultto do
        resource.class.defaultprovider.default_target
      end
    end

    target = "/etc/nagios/#{full_name.to_s}.cfg"
    provider = type.provide(:naginator, :parent => Puppet::Provider::Naginator, :default_target => target) {}
    provider.nagios_type

    type.desc "The Nagios type #{name.to_s}.  This resource type is autogenerated using the
      model developed in Naginator, and all of the Nagios types are generated using the
      same code and the same library.

      This type generates Nagios configuration statements in Nagios-parseable configuration
      files.  By default, the statements will be added to `#{target}`, but
      you can send them to a different file by setting their `target` attribute.

      You can purge Nagios resources using the `resources` type, but *only*
      in the default file locations.  This is an architectural limitation.

    "
  end
end
